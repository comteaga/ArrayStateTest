name: Node.js CI

on:
  push:
    branches: ['main']

jobs:
  build:
    runs-on: ubuntu-latest
    name: Build artifact
    strategy:
      matrix:
        node-version: [16.x]

    steps:
      - name: Get current date
        id: date
        run: echo "DATE=$(date +'%Y-%m-%d')" >> $GITHUB_ENV
      - name: Timestamp temp
        run: echo ${{ env.DATE }}
  #     - uses: actions/checkout@v3
  #     - name: Use Node.js ${{ matrix.node-version }}
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: ${{ matrix.node-version }}
  #         cache: 'npm'

  #     - name: Installing dependencies
  #       run: npm ci

  #     - name: Build project
  #       run: CI=false npm run build --if-present

  #     - name: Creating deployment artifact
  #       env:
  #         GITHUB_SHA: ${{ github.sha }}
  #       run: tar -czf "${GITHUB_SHA}".tar.gz build

  #     - name: Storing artifact
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: app-build
  #         path: ${{ github.sha }}.tar.gz
  #         retention-days: 1

  # connect-vpn:
  #   runs-on: ubuntu-latest
  #   name: Upload to server
  #   needs: build
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Install OpenVPN
  #       run: |
  #         sudo apt-get update
  #         sudo apt-get --assume-yes --no-install-recommends install openvpn

  #     - name: Setup VPN config
  #       run: |
  #         echo "${{ secrets.CA_CRT }}" > ca.crt
  #         echo "${{ secrets.TLS_KEY }}" > tls.key
  #         echo "${{ secrets.AUTH }}" > auth.txt

  #     - name: Connect VPN
  #       run: sudo openvpn --config ".github/vpn/config.ovpn" --log "vpn.log" --daemon

  #     - name: Wait for a VPN connection
  #       timeout-minutes: 1
  #       run: until ping -c 1 ${{ secrets.HOST }}; do sleep 2; done

  #     # DEPLOY here
  #     - uses: actions/download-artifact@v2
  #       name: Downloading artifact
  #       with:
  #         name: app-build
  #     - name: Uploading to server
  #       uses: appleboy/scp-action@master
  #       with:
  #         host: ${{ secrets.HOST }}
  #         username: ${{ secrets.USERNAME }}
  #         password: ${{ secrets.KEY }}
  #         port: 22
  #         source: ${{ github.sha }}.tar.gz
  #         target: /tmp/builds/${{ github.event.repository.name }}/
  #     - name: Extracting files
  #       uses: appleboy/ssh-action@master
  #       with:
  #         host: ${{ secrets.HOST }}
  #         username: ${{ secrets.USERNAME }}
  #         password: ${{ secrets.KEY }}
  #         port: 22
  #         script: |
  #           mkdir -p /home/${{ github.event.repository.name }}/releases/${{ github.sha }}
  #           tar -xzf /tmp/builds/${{ github.event.repository.name }}/${{ github.sha }}.tar.gz -C /home/${{ github.event.repository.name }}/releases/${{ github.sha }}
  #     - name: Activating release
  #       uses: appleboy/ssh-action@master
  #       with:
  #         host: ${{ secrets.HOST }}
  #         username: ${{ secrets.USERNAME }}
  #         password: ${{ secrets.KEY }}
  #         port: 22
  #         script: |
  #           ln -s -n -f /home/${{ github.event.repository.name }}/releases/${{ github.sha }}/build /var/www/html/teste/current

  #     - name: Clean up
  #       uses: appleboy/ssh-action@master
  #       with:
  #         host: ${{ secrets.HOST }}
  #         username: ${{ secrets.USERNAME }}
  #         password: ${{ secrets.KEY }}
  #         port: 22
  #         script: |
  #           rm /tmp/builds/${{ github.event.repository.name }}/*.tar.gz
  #           cd /home/${{ github.event.repository.name }}/releases && ls -t -1 | tail -n +4 | xargs rm -rf

  #     - name: Kill VPN connection
  #       if: always()
  #       run: |
  #         sudo killall openvpn
